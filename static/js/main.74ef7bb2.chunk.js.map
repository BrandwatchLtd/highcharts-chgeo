{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["customWorldGeoFromTop","topojson","customWorldTopo","objects","D3Map","props","style","stroke","fill","projection","d3","fitSize","width","height","geojson","geoGenerator","features","map","feature","index","d","key","className","highchartsMap","Highcharts","App","highcharts","constructorType","options","series","mapData","highchartsWorldGeo","customWorldGeo","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"kypiWAgBMA,EAAwBC,IAAiBC,EAAiBA,EAAgBC,QAAQ,wBAIxF,SAASC,EAAMC,GAGb,IAAMC,EAAQ,CACZC,OAAQ,oBACRC,KAAM,sBAGFC,EAAaC,MAChBC,QAAQ,CAACN,EAAMO,MAAOP,EAAMQ,QAASR,EAAMS,SAExCC,EAAeL,MAClBD,WAAWA,GAERO,EAAWX,EAAMS,QAAQE,SAASC,KAAI,SAACC,EAASC,GACpD,OACE,0BACEC,EAAGL,EAAaG,GAChBZ,MAAOA,EACPe,IAAKF,OAKX,OACE,yBAAKP,MAAOP,EAAMO,MAAQ,KAAMC,OAAQR,EAAMQ,OAAS,MACrD,uBAAGS,UAAU,OAAON,IA5B1BO,IAAcC,KAqECC,MApCf,WACE,OACE,6BACE,6DAEA,mDACA,kBAAC,IAAD,CACEC,WAAYF,IACZG,gBAAiB,WACjBC,QAAS,CAACC,OAAQ,CAAC,CAACC,QAASC,OAG/B,gDACA,kBAAC,IAAD,CACEL,WAAYF,IACZG,gBAAiB,WACjBC,QAAS,CAACC,OAAQ,CAAC,CAACC,QAASE,OAG/B,0DACA,kBAAC,IAAD,CACEN,WAAYF,IACZG,gBAAiB,WACjBC,QAAS,CAACC,OAAQ,CAAC,CAACC,QAAS9B,OAG/B,0DACA,kBAACI,EAAD,CAAOU,QAASiB,EAAoBnB,MAAO,IAAKC,OAAQ,MAExD,uDACA,kBAACT,EAAD,CAAOU,QAASkB,EAAgBpB,MAAO,IAAKC,OAAQ,QCrEtCoB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.74ef7bb2.chunk.js","sourcesContent":["import React from 'react';\n\nimport './App.css';\n\nimport * as topojson from 'topojson-client';\nimport * as d3 from 'd3';\n\nimport Highcharts from 'highcharts'\nimport HighchartsReact from 'highcharts-react-official'\nimport highchartsMap from 'highcharts/modules/map';\n\nimport highchartsWorldGeo from '@highcharts/map-collection/custom/world.geo.json';\n\nimport customWorldGeo from './custom-data/custom.world.geo.json';\nimport customWorldTopo from './custom-data/custom.world.topo.json';\n\nconst customWorldGeoFromTop = topojson.feature(customWorldTopo, customWorldTopo.objects['WORLD-countries-geo']);\n\nhighchartsMap(Highcharts);\n\nfunction D3Map(props) {\n  // Adapted from https://bl.ocks.org/animateddata/526bb86fa1b6b5ff49599fc0df4797a4\n\n  const style = {\n    stroke: 'rgb(204, 204, 204',\n    fill: 'rgb(247, 247, 247)'\n  };\n\n  const projection = d3.geoNaturalEarth1()\n    .fitSize([props.width, props.height], props.geojson);\n\n  const geoGenerator = d3.geoPath()\n    .projection(projection);\n\n  const features = props.geojson.features.map((feature, index) => {\n    return (\n      <path\n        d={geoGenerator(feature)}\n        style={style}\n        key={index}\n      />\n    );\n  });\n\n  return (\n    <svg width={props.width + 'px'} height={props.height + 'px'}>\n      <g className=\"map\">{features}</g>\n    </svg>\n  );\n}\n\nfunction App() {\n  return (\n    <div>\n      <h1>Highcharts Custom Geo Example</h1>\n    \n      <h2>Higcharts World Geo</h2>\n      <HighchartsReact\n        highcharts={Highcharts}\n        constructorType={'mapChart'}\n        options={{series: [{mapData: highchartsWorldGeo }]}}\n      />\n    \n      <h2>Custom World Geo</h2>\n      <HighchartsReact\n        highcharts={Highcharts}\n        constructorType={'mapChart'}\n        options={{series: [{mapData: customWorldGeo }]}}\n      />\n    \n      <h2>Custom World Geo from Topo</h2>\n      <HighchartsReact\n        highcharts={Highcharts}\n        constructorType={'mapChart'}\n        options={{series: [{mapData: customWorldGeoFromTop }]}}\n      />\n      \n      <h2>D3 Map using Highchart Geo</h2>\n      <D3Map geojson={highchartsWorldGeo} width={800} height={600}/>\n        \n      <h2>D3 Map using Custom Geo</h2>\n      <D3Map geojson={customWorldGeo} width={800} height={600}/>\n        \n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}